<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo主题美化</title>
    <url>/2020/06/14/Hexo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Hexo美化"><a href="#Hexo美化" class="headerlink" title="Hexo美化"></a>Hexo美化</h1><h2 id="修改网站图标"><a href="#修改网站图标" class="headerlink" title="修改网站图标"></a>修改网站图标</h2><h3 id="1-实现效果"><a href="#1-实现效果" class="headerlink" title="1. 实现效果"></a>1. 实现效果</h3><p>   <img src="https://i.loli.net/2020/06/14/Z4eQtNWaku6gzdh.png" alt="image-20200614211627199" style="zoom:67%;" div align=center/></p>
<h3 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><p>制作或者下载自己的网站图标，这里推荐几个免费的图标下载网站. </p>
<p><a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a></p>
<p><a href="https://icons8.com/" target="_blank" rel="noopener">Download free icons, music, stock photos, vectors</a></p>
<p><a href="https://illustrio.com/" target="_blank" rel="noopener">illustrio: 100% free, 100% customizable icon library</a></p>
<p><a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a" target="_blank" rel="noopener">https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a</a></p>
<p>下载的图标最好是32x32和16x16的,  将它们放进<code>/themes/next/source/images/</code>中, 在主题config文件搜索favicon, 进行如下修改</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment"># small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="comment"># medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/你的图标名(16x16)</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/你的图标名(32x32)</span></span><br></pre></td></tr></table></figure>
<h2 id="修改Next主题底部标签的-号"><a href="#修改Next主题底部标签的-号" class="headerlink" title="修改Next主题底部标签的#号"></a>修改Next主题底部标签的#号</h2><h3 id="1-实现效果-1"><a href="#1-实现效果-1" class="headerlink" title="1. 实现效果"></a>1. 实现效果</h3><p><img src="https://i.loli.net/2020/06/14/gu2OWawqbG1ZhzM.png" alt="image-20200614105134514" style="zoom: 67%;" /></p>
<h3 id="2-实现方法-1"><a href="#2-实现方法-1" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><p>打开 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt; </code>，将 <code></code> 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<h2 id="添加社交图标"><a href="#添加社交图标" class="headerlink" title="添加社交图标"></a>添加社交图标</h2><h3 id="1-实现效果-2"><a href="#1-实现效果-2" class="headerlink" title="1. 实现效果"></a>1. 实现效果</h3><h3 id="2-实现方法-2"><a href="#2-实现方法-2" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><p>在主题config文件中搜索social, 取消相应注释即可.</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="comment"># GitHub: https://github.com/shawer96 || github</span></span><br><span class="line">  <span class="comment"># E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  <span class="comment"># Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || rss</span></span><br></pre></td></tr></table></figure>
<p>也可按照<code>名称: 链接地址 || 社交图标</code>的格式自定义其他的社交账号, 其中<code>||</code>后面的图标是其在<a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a>中对应的图标名, 不需要下载.</p>
<h2 id="文章加锁"><a href="#文章加锁" class="headerlink" title="文章加锁"></a>文章加锁</h2><h3 id="1-实现效果-3"><a href="#1-实现效果-3" class="headerlink" title="1.实现效果"></a>1.实现效果</h3><p><img src="https://i.loli.net/2020/06/14/BH3mvAxdMb9l4Yc.png" alt="image-20200614215553079"></p>
<h3 id="2-实现方法-3"><a href="#2-实现方法-3" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h3><ol>
<li>下载加密插件</li>
</ol>
<p>   进入hexo根目录，使用<code>npm install hexo-blog-encrypt</code>命令安装插件。</p>
<ol>
<li>修改配置文件</li>
</ol>
<p>​        在hexo根目录下的config文件中, 添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在文章属性栏中添加相应字段</li>
</ol>
<p><img src="https://i.loli.net/2020/06/14/Y6PVFjne9cHlzhy.png" alt="image-20200614215627622" style="zoom: 67%;" /></p>
<p>​    password:  文章的密码</p>
<p>​    message: 输入密码界面提示说明.</p>
<p>​    abstract: 文章界面介绍.</p>
<p>​    message和abstract可以省略.</p>
<h2 id="折叠首页文章"><a href="#折叠首页文章" class="headerlink" title="折叠首页文章"></a>折叠首页文章</h2><h3 id="1-实现效果-4"><a href="#1-实现效果-4" class="headerlink" title="1. 实现效果"></a>1. 实现效果</h3><p><img src="https://i.loli.net/2020/06/14/CcZoB8XpVUJkHNr.png" alt="image-20200614220006815" style="zoom:67%;" /></p>
<h3 id="2-实现方法-4"><a href="#2-实现方法-4" class="headerlink" title="2.实现方法"></a>2.实现方法</h3><ol>
<li><del>已失效, 修改主题config文件中的</del></li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<p>​        随着Next主题的更新, 这一方法不再有用.</p>
<ol>
<li>在文章中的属性栏中添加description，并提供文章摘录</li>
</ol>
<p>   这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示</p>
<p>   <img src="https://i.loli.net/2020/06/15/3YIW8ZFi7DJVTq6.png" alt="image-20200615000644376" style="zoom: 67%;" /></p>
<ol>
<li>在文章中使用<code>&lt; !--more--&gt;</code> 手动进行截断</li>
</ol>
<p>   这种方法可以根据文章的内容，自己在合适的位置添加 <code>&lt; !--more--&gt;</code> 标签，使用灵活，也是Hexo推荐的方法</p>
<p>​        <img src="https://i.loli.net/2020/06/14/hqtfdeRPaTrx7Dj.png" alt="image-20200614220921108"></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2019/12/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="c60b1ad9f22f09a9905fa786aac12ca23e35ac28ef82a4d384ba02338c7309b0">2daa0e43d16059575e0358eeb13204c9334f10fe9f5b4c4ca9e491347ae1aac787a653f3bfdff483154faa9c306499459a543d8e0e9fdb7cb6a5691a3868df52cad9689da85c8199db4aac1924b04b538bf91d99cddcb7f67e38171e7d09e6b5597213a8b0d8533be2784f8c387f9f0e68d0da8bb048934a16c72aa145f07ad7ad2b10054f7f6b1d80b0d972ac6485d319be33fd5c92fbe1131f89956e7073ea85085780b1c6a34ebadafa0d52784ba9f0261bdd30c89b38edda4c7efe264159e6e8a362df38552661363061bfa6a36abe0affed58798e5a6d70904733b2ad67d59ed42e7b388d29ddb4d8010b266ca05db60cbedc9060a428ca1bad408deceeab54380c354fdfb78225304e7d4c88b8e72446d8af33f4178fb27faf0449b805d486d93cb7785dd7dbb3392434262aab7a601b8088edb79def0f6fdb4926f9d04f2c1e1aead921142879cb84a484b8e4dfcd34931c5fcea43e424ded1d1812eba22ca16c330fd68f276497435047212117eeb1a62d4c93242d72e10d6724aaad4dcfb180bc95b3f5b99e65330158bd894ce97a9c4fb53d4f5c1ea52ef8ff5dbe2648adca06564933bdac07b21b3cad5c719d3e3240f6c8552d75e8f2915a921e6d0843ea372193f682b95dcd3bf10c782b69c7ce44d3b0090bc7d681e2fc7b223cf6d6d0250200d0783bc24ad9075ab73f86040d8f679046798f5cd3a1ca8209329d43d6f89d643546670e222bb26ffd8b10a56ce2af5dbc3e12ae65c3f3216d657241a0657c72df14798ba83b10ccddbb47eef59f497761a407577164474a0c2e03e28634c6f9912748f2d6dd6a69b188d8cc2e21686e42bab33415c5f368932f753d1fd62ace6bbf3c7b75a9e2a799ed4d386784a9ce1405719dc52e00dc1f0c85e5c6ac756e1e14c66a268140ebf1b1ecfa515901fd273c9351202425498ae9b937346baa409fcfe66635c516435b9a929ec339333d2d8e0091b8bc155b1f24d6fe55d4d17d8a760648d92ccd7983b79df3cd5e2aa01f015c75216019495aabe0fedd9b61d1b5672d5643de5e7b7adff4dd66c76df3f67193d7e3812aca14eb90b0badc2dc2461c8a98524cb119b47ca1302e93962a861f229c0fdcc505cfb12451ec1bad993b4e8e23dee748821febba58e44b376a927b5b7a3d19439c3b9878319c543f34f7dec63c58fcf910fe08bb7335c34f277eedb08d61ac013b1c887783e609bfe2f17fe64abd6d402da318e9668de1a6d5b6ce48ceb45da8337e001be83a04e4351b653c4bbd9ee42d16b3c8639da1f7e5636130c198a212e168bc4dc35121d604ba0de0cb781467df42</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>经典论文系列--Buffet</title>
    <url>/2020/06/12/%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97-Buffet/</url>
    <content><![CDATA[<h1 id="Buffets-An-Efficient-and-Composable-Storage-Idiom-for-Explicit-Decoupled-Data-Orchestration"><a href="#Buffets-An-Efficient-and-Composable-Storage-Idiom-for-Explicit-Decoupled-Data-Orchestration" class="headerlink" title="Buffets: An Efficient and Composable Storage Idiom for Explicit Decoupled Data Orchestration"></a>Buffets: An Efficient and Composable Storage Idiom for Explicit Decoupled Data Orchestration</h1><blockquote>
<p>原文: Pellauer, M., et al. (2019). Buffets. Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems - ASPLOS ‘19: 137-151.</p>
</blockquote>
<a id="more"></a>
<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><h3 id="1-要解决什么问题"><a href="#1-要解决什么问题" class="headerlink" title="1. 要解决什么问题"></a>1. 要解决什么问题</h3><p>提出针对加速器不同需求通用的, 可重用的storage idiom, 它独立于任何特定的设计.</p>
<h3 id="2-通过什么理论或者模型来解决"><a href="#2-通过什么理论或者模型来解决" class="headerlink" title="2. 通过什么理论或者模型来解决"></a>2. 通过什么理论或者模型来解决</h3><ul>
<li><p>Buffet</p>
</li>
<li><p>Decoupled fills and accesses with fine-grained synchronization.</p>
</li>
<li><p>Hierarchical composition, and efficient multi-casting. </p>
</li>
</ul>
<h3 id="3-给出了什么答案"><a href="#3-给出了什么答案" class="headerlink" title="3. 给出了什么答案"></a>3. 给出了什么答案</h3><p>在8KB RAM上仅仅增加2%的控制开销,与DMA管理的double-buffer scratched pad和跨各种工作负载的cache相比，Buffet分别将能量延迟乘积提高了1.53倍和5.39倍。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="1-研究意义"><a href="#1-研究意义" class="headerlink" title="1. 研究意义"></a>1. 研究意义</h3><p>相较于通用芯片, 数据编排(data orchestration)—即将数据移入或者移出buffer heirarchy, 是专用加速芯片实现高性能的重要方法.</p>
<p><img src="https://i.loli.net/2020/06/11/4sbALD7TirONE19.png" alt="image-20200611104101471" style="zoom:80%;" /></p>
<p>加速器在定制的片上缓冲上花费了大量的精力。不幸的是，这些解决方案与特定设计紧密相关，从而妨碍了其他加速器领域的可重用性。</p>
<h3 id="2-研究背景"><a href="#2-研究背景" class="headerlink" title="2. 研究背景"></a>2. 研究背景</h3><p>Existing reusable buffer idiom:</p>
<p>cache</p>
<ul>
<li>过多面积和功耗用于隐式数据编排, 与加速器需求不一致.</li>
</ul>
<p>scratched pad</p>
<ul>
<li>不灵活, 不满足复杂数据重用和更新模式需求.</li>
</ul>
<p>FIFO</p>
<ul>
<li>缺乏同步性, 难以层次化..</li>
</ul>
<h3 id="3-基于哪些假设"><a href="#3-基于哪些假设" class="headerlink" title="3. 基于哪些假设"></a>3. 基于哪些假设</h3><ol>
<li>显式解耦合(EDDO)方式.</li>
<li>同步实现方式.</li>
<li>Buffet与层次化存储结合, buffet间同步, 支持单buffet多数据广播.</li>
</ol>
<h2 id="Classifying-Data-Orchestration"><a href="#Classifying-Data-Orchestration" class="headerlink" title="Classifying Data Orchestration"></a>Classifying Data Orchestration</h2><p>加速器架构师利用他们在设计时对工作负载特征和访问模式的了解，可以获得以下收益：</p>
<ul>
<li>预取—提前准确的取来将被使用的数据,</li>
<li>在最小，最快和最节能的缓冲区中最大程度地访问数据,</li>
<li><del>将数据暂存到层次结构中共享者之间最小上限的缓冲区中,</del></li>
<li>将下一个数据图块的填充与当前数据图块的消耗重叠，</li>
<li>同时向访问的数据的所有使用者广播（或multi-casting）缓冲区访问的结果，</li>
<li>精确且廉价地同步数据可用性,</li>
<li>准确删除不再需要的数据</li>
</ul>
<p>传统应用场景下的resuable buffering idioms分类:</p>
<p>​        implict/explict: workload在何种程度上决定暂存, 缓存策略.</p>
<p>​        coupled/decoupled: 访存请求是round-trip还是flow-forward.</p>
<p><img src="https://i.loli.net/2020/06/11/HG2x6trF9miWDl8.png" alt="image-20200611115419792" style="zoom: 67%;" /></p>
<h3 id="1-Implicit-versus-Explicit-Orchestration"><a href="#1-Implicit-versus-Explicit-Orchestration" class="headerlink" title="1. Implicit versus Explicit Orchestration"></a>1. Implicit versus Explicit Orchestration</h3><ul>
<li>cache<ul>
<li>可重用的模块化的buffer抽象</li>
<li>implict: 发起请求的程序并不指定数据何时重用和清空</li>
<li>启发式(Heuristic)替换策略, 与workload无关</li>
<li>但对于特定领域的加速器, tag匹配等带来的面积和功耗开销也难以忍受</li>
</ul>
</li>
<li>Scratched Pad<ul>
<li>指定存储的地址范围, 实现显示数据编排和精确控制</li>
<li>常用于GPU的shared mem</li>
<li>避免了cache的硬件开销</li>
<li>Across fill和overlaping fill繁琐且易出错, 难组成层级化的存储</li>
</ul>
</li>
</ul>
<h3 id="2-Coupled-versus-Decoupled-Orchestration"><a href="#2-Coupled-versus-Decoupled-Orchestration" class="headerlink" title="2.  Coupled versus Decoupled Orchestration"></a>2.  Coupled versus Decoupled Orchestration</h3><ul>
<li><p>Coupled</p>
<ul>
<li>存取请求的发起者也接收响应.</li>
<li>Pros: <ul>
<li>数据需求和使用之前的同步性高效且直观</li>
</ul>
</li>
<li>Cons: <ul>
<li>难以实现数据填充(fill)和访问(access)之间的overlap—请求/响应者要来在请求者和消费者之间回变换角色</li>
</ul>
</li>
<li>必须为整个往返负载延迟保留传入数据图块的“着陆区(landing zone)”，这会增加对RAM资源的压力</li>
</ul>
</li>
</ul>
<ul>
<li><p>Decoupled</p>
<ul>
<li><p>单独的硬件模块（例如DMA或地址生成器（AGEN））负责将数据推送到一个或多个功能单元的staging buffer中.</p>
</li>
<li><p>为了掩盖延时, ==这些buffer通常是ping-pong buffers[1,2].</p>
</li>
<li><p>Pros:</p>
<ul>
<li>请求者可以以自己的速度运行, 返回的数据可以广播到多个使用者.</li>
<li>访存是feed-forward的, 只需要与相邻层级的存储结构之间的lantancy相关的landing zong,  而不是在整个层次结构之间round-trip(比如cache如果miss还要去访问高一级存储, 如果decoupled那么buffer的大小只需要掩盖L1到L2的延时)</li>
</ul>
</li>
<li><p>Cons:</p>
<ul>
<li>传统的DAE数据编排依然是隐式的, 使用cache的管理机制</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/06/12/HYUbECoueQTwhqa.png" alt=""></p>
<h3 id="3-Synchronization-Concerns"><a href="#3-Synchronization-Concerns" class="headerlink" title="3. Synchronization Concerns"></a>3. Synchronization Concerns</h3><p>何时load一个new tile? 过早会导致数据被覆盖, 过晚会导致性能损失. </p>
<p>通过脉动阵列来约束tile的执行时间是一种办法. 对于涉及片外访问或者条件执行的系统, 这些时限过于保守.</p>
<p>本文采用ready-valid握手协议, 也可以使用其他micro-protocols(例如TRY/ACK). 本文提供了一个EDDO storage idiom，它在staging buffer操作本身中封装了细粒度的同步。</p>
<h2 id="The-Buffet-Storage-Idiom"><a href="#The-Buffet-Storage-Idiom" class="headerlink" title="The Buffet Storage Idiom"></a>The Buffet Storage Idiom</h2><p><img src="https://i.loli.net/2020/06/12/omPiChJxk5trX1S.png" style="zoom: 67%;" /></p>
<p>上图给出了buffet的数据编排模型, 它属于表1中的EDDO象限. 相较于DMA, 采用decoupled AGEN扩大了解耦的范围.</p>
<p>在buffet中，有限状态机控制四个基本存储操作：</p>
<ol>
<li>Fill(data)</li>
<li>Read(index)</li>
<li>Update(index, data): </li>
<li>Shrink(num)</li>
</ol>
<p>上级存储如DRAM通过<strong>FILL</strong>操作填入数据. 下级模块（例如DataPath）则通过<strong>Read</strong>和<strong>Update</strong>操作来处理buffet中的数据. <strong>Shrink</strong>操作从窗口中删除数据.</p>
<p><img src="https://i.loli.net/2020/06/12/kprVbnS1IgGwmxu.png" style="zoom:67%;" /></p>
<h3 id="1-Buffet-Operational-Behavior"><a href="#1-Buffet-Operational-Behavior" class="headerlink" title="1. Buffet Operational Behavior"></a>1. Buffet Operational Behavior</h3><p><img src="https://i.loli.net/2020/06/12/PcMjgDhnptIOEfV.png" alt="image-20200611205302228" style="zoom: 50%;" /></p>
<p>❶新传输的数据通过Fill逻辑装入RAM, 这一步类似于传统的FIFO, 数据不带有地址信息. Local地址的生成依赖于填充顺序.</p>
<p>❷与FIFO不同的是Read请求包含一个额外的Index, 允许以与接收数据不同的顺序读取数据. 这一index是相对于staging buffer中的oldest installed datum. 这一缩影不能超出RAM的大小.  传统的FIFO只要为非空，就会声明Pop.Vld. 在buffet中，请求数据的存在是索引的函数.  只有被请求的数据已被填充, 才会设置ReadRsp.VLD.</p>
<p>❸除了索引读取之外，与FIFO的一个显着区别是活动窗口内的数据元素可以就地修改，我们将其称为Update路径.</p>
<p>❹ shrink路径描述了从buffet中删除暂存数据的逻辑。此操作采用size参数，并从活动窗口中删除那么多元素。此操作仅更新内部记分板-不会发生数据移动。credits被释放到Fill AGEN，表明有空间可以进行另一次批量传输. 主张谁使用数据(生成index)谁shrink.</p>
<p><img src="https://i.loli.net/2020/06/12/uZ1agqPvn9zxKRo.png" alt="image-20200611211210544" style="zoom:80%;" /></p>
<h3 id="2-Buffet-Synchronization-Details"><a href="#2-Buffet-Synchronization-Details" class="headerlink" title="2. Buffet Synchronization Details"></a>2. Buffet Synchronization Details</h3><ul>
<li>需要显式硬件同步的情况由算法1中的“wait_until”调用表示。</li>
<li>由于公式1中的操作顺序，许多其他同步情况都可以在不需要显式硬件支持的情况下处理，如图4所示。</li>
<li>RAW冒险检查—计分板<ul>
<li>will_update 用于表示datapath即将修改当前阶段的值</li>
<li>如果后续的<strong>Read</strong>请求正在被修改的索引，则响应将stall—这与读取尚未填充的索引没有区别</li>
<li><strong>FILL</strong>写入时不需要检查</li>
<li>定制化—如果确定没有RAW冒险, 可以删除RAW检查, 如果<strong>FILL</strong>与<strong>UPDATE</strong>互斥, 可以共享一个写端口. </li>
</ul>
</li>
<li><strong>SHRINK</strong>与<strong>FILL</strong>之间的同步<ul>
<li>算法1中对<strong>SHRINK</strong>保守的使用显示同步—wait_until(num&lt;occupancy).</li>
<li>图4将其描述为隐式同步, 详见第四节</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/06/12/On4vEXflL9IuGKk.png" alt="image-20200611212533286" style="zoom:67%;" /></p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><h3 id="4-Composition-of-Buffets"><a href="#4-Composition-of-Buffets" class="headerlink" title="4. Composition of Buffets"></a>4. Composition of Buffets</h3><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h3 id="1-文章的主要内容"><a href="#1-文章的主要内容" class="headerlink" title="1. 文章的主要内容"></a>1. 文章的主要内容</h3><h3 id="2-存在哪些缺陷"><a href="#2-存在哪些缺陷" class="headerlink" title="2. 存在哪些缺陷"></a>2. 存在哪些缺陷</h3><h3 id="3-有什么构思"><a href="#3-有什么构思" class="headerlink" title="3. 有什么构思"></a>3. 有什么构思</h3><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote>
<p>[1] J. Cong, M. A. Ghodrat, M. Gill, B. Grigorian, K. Gururaj, and G. Reinman. Accelerator-rich architectures: Opportunities and progresses. In Proceedings of the Design Automation Conference (DAC), 2014.<br>[2] E. G. Cota, P. Mantovani, G. D. Guglielmo, and L. P. Carloni. An analysis of accelerator coupling in heterogeneous architectures. In 2015 52nd ACM/EDAC/IEEE Design Automation Conference (DAC), pages 1–6, June 2015.</p>
</blockquote>
]]></content>
      <categories>
        <category>经典论文系列</category>
      </categories>
      <tags>
        <tag>计算机体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title>经典论文系列--卷积神经网络加速器最优设计空间</title>
    <url>/2020/06/15/%E7%BB%8F%E5%85%B8%E8%AE%BA%E6%96%87%E7%B3%BB%E5%88%97-Optimizing-the-Convolution-Operation-to-Accelerate/</url>
    <content><![CDATA[<h1 id="Optimizing-the-Convolution-Operation-to-Accelerate-Deep-Neural-Networks-on-FPGA"><a href="#Optimizing-the-Convolution-Operation-to-Accelerate-Deep-Neural-Networks-on-FPGA" class="headerlink" title="Optimizing the Convolution Operation to Accelerate Deep Neural Networks on FPGA"></a>Optimizing the Convolution Operation to Accelerate Deep Neural Networks on FPGA</h1><blockquote>
<p>原文: Ma, Y., et al. (2018). “Optimizing the Convolution Operation to Accelerate Deep Neural Networks on FPGA.” IEEE Transactions on Very Large Scale Integration (VLSI) Systems 26(7): 1354-1367.</p>
</blockquote>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h3 id="1-作者想要解决什么问题"><a href="#1-作者想要解决什么问题" class="headerlink" title="1. 作者想要解决什么问题"></a>1. 作者想要解决什么问题</h3><p>卷积加速方案会显著影响CNN加速器的效率和性能。卷积涉及具有四个循环级别的乘法和累加运算，这带来了较大的设计空间。但先前的工作要么采用有限的循环优化技术，例如循环展开(unrollilng)，分块(tilling)和交换(interchange)，要么仅在加速器体系结构和数据流已经固定之后才调整一些设计变量。最终的加速器几乎无法利用数据重用并有效地管理数据移动。</p>
<h3 id="2-通过什么理论或者模型来解决"><a href="#2-通过什么理论或者模型来解决" class="headerlink" title="2. 通过什么理论或者模型来解决"></a>2. 通过什么理论或者模型来解决</h3><p>本文通过基于多个设计变量定量分析和优化CNN加速器的设计目标（例如内存访问）来克服上述障碍。<strong>然后，本文提出了硬件CNN加速的特定数据流，以最大程度地减少数据通信，同时最大化资源利用率以实现高性能。</strong></p>
<h3 id="3-给出了什么答案"><a href="#3-给出了什么答案" class="headerlink" title="3. 给出了什么答案"></a>3. 给出了什么答案</h3><p>通过实现包括NiN，VGG-16和ResNet-50 / ResNet152的端到端CNN进行推理，演示了提出的CNN加速方案和体系结构。对于VGG-16  CNN，在Intel Stratix V和Arria 10 FPGA上，总体吞吐量分别达到348 GOPS和715 GOPS.</p>
<h2 id="I-引言"><a href="#I-引言" class="headerlink" title="I. 引言"></a>I. 引言</h2><h3 id="1-研究背景"><a href="#1-研究背景" class="headerlink" title="1.研究背景"></a>1.研究背景</h3><p>现代FPGA允许定制架构，并可以利用数百到数千个片上DSP模块。但是，在将CNN映射到FPGA上仍然存在重大挑战。</p>
<p>深度CNN算法具有数十到数百个层，在大小和配置方面，各层之间存在显着差异。  FPGA上有限的计算资源和存储容量使CNN的最佳映射任务（例如，使受能耗限制的延时最小化，或者相反）成为一个复杂的多维优化问题。片外通信的高成本是实现更高性能和更低能耗的另一个主要障碍。实际上，与大量数据移动和存储器访问相关的能源成本通常超过了计算的能源消耗。由于这些原因，基于FPGA的高能效CNN硬件加速需要同时最大化资源利用和数据重用，以及最小化数据通信。</p>
<h3 id="2-研究现状"><a href="#2-研究现状" class="headerlink" title="2. 研究现状"></a>2. 研究现状</h3><p>在CNN中，卷积由沿着kernel和特征图滑动的<strong>四个level的循环执行</strong>，如图1所示。这产生了一个庞大的设计空间，其中包括用于：实现并行性，计算顺序和对大数据集进行划分的各种选择，将数据分成较小的块以适合片上存储器等。这些问题可以通过现有的循环优化技术]处理，例如循环展开，分块和交换。</p>
<p><img src="https://i.loli.net/2020/06/15/AhqwfLtMNJpegar.png" alt="image-20200615163047678"></p>
<p>尽管已经有加速器采用了这些技术，但是尚未对这些技术对设计效率和性能的影响进行系统和充分的研究。如果没有充分研究卷积的循环操作，就很难为高吞吐量的CNN实现有效地自定义数据流和体系结构。</p>
<h3 id="3-基于哪些假设"><a href="#3-基于哪些假设" class="headerlink" title="3. 基于哪些假设"></a>3. 基于哪些假设</h3><p>CNN中超过90％的运算都涉及卷积操作。因此，有理由认为，加速方案应侧重于并行计算的管理以及跨多个级别的存储器（例如，片外动态随机存取存储器（DRAM），片上存储器和  本地寄存器）的数据存储和访问的组织。</p>
<ol>
<li>我们对卷积运算的三种循环优化技术进行了深入分析，并使用相应的设计变量<strong>对加速方案进行了数值表征</strong>。</li>
<li>根据设计变量的配置，定量估算CNN加速器的设计目标（例如延迟，访存）。</li>
<li>提出了一种有效的卷积加速策略和数据流，旨在最<strong>小化数据通信和内存访问</strong>。</li>
<li>数据路由（data router）的设计目的是处理卷积滑动操作（例如stride和padding）的不同设置，尤其是对于高度不规则的CNN。</li>
<li>设计了一种相应的硬件体系结构，该体系结构充分利用了计算资源以实现高性能和高效率，并且对于所有层而言都是统一且可重复使用的。</li>
</ol>
<h2 id="II-卷积的加速—关键设计变量"><a href="#II-卷积的加速—关键设计变量" class="headerlink" title="II. 卷积的加速—关键设计变量"></a>II. 卷积的加速—关键设计变量</h2><h3 id="1-通用的CNN加速器系统"><a href="#1-通用的CNN加速器系统" class="headerlink" title="1. 通用的CNN加速器系统"></a>1. 通用的CNN加速器系统</h3><p>CNN算法设计大量数据和权重，片上存储不足以存储所有数据。因此，典型的CNN加速器包括三个层次的存储层次结构：1）外部存储器； 2）片上缓存；3）PE关联的寄存器</p>
<p><img src="https://i.loli.net/2020/06/15/UWRjYhspAbvazd1.png" alt="image-20200615164907018"></p>
<p>基本流程是将数据从外部存储器获取到片上缓冲器，然后将其馈送到寄存器和PE中。  PE计算完成后，结果将传输回片上缓冲区，并在必要时传输到外部存储器，这些数据将用作后续层的输入。</p>
<h3 id="2-卷积循环"><a href="#2-卷积循环" class="headerlink" title="2. 卷积循环"></a>2. 卷积循环</h3><p>卷积是由四个级别的循环实现的，如图1中的伪代码所示，如图3所示。为了有效地映射和执行卷积循环，可以使用三种循环优化技术，即循环展开(unrolling)，循环分块(tilling)和循环交换(interchange)用于定制具有三个级别的内存层次结构的加速器的计算和通信模式。</p>
<p><img src="https://i.loli.net/2020/06/15/6KTSDQXbq3ZasFg.png" alt="image-20200615165112556"></p>
<h3 id="3-循环优化和设计变量"><a href="#3-循环优化和设计变量" class="headerlink" title="3. 循环优化和设计变量"></a>3. 循环优化和设计变量</h3><p>图3使用多个维度（dimensions）描述给定CNN的每个卷积层的特征图和卷积核尺寸。循环展开和循环分块的硬件设计变量将确定加速因子和硬件占用空间。表I列出了本文中使用的所有dimensions和variables。</p>
<p><img src="https://i.loli.net/2020/06/15/6QXrBi1oC38wFRH.png" alt="image-20200615165538174"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th>意义</th>
<th>符号</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$N_{kx}$</td>
<td>卷积窗宽度</td>
<td>$N_{ky}$</td>
<td>卷积窗高度</td>
</tr>
<tr>
<td style="text-align:left">$N_{ix}$</td>
<td>Input Feature宽度</td>
<td>$N_{iy}$</td>
<td>Input Feature高度</td>
</tr>
<tr>
<td style="text-align:left">$N_{ox}$</td>
<td>Output Feature宽度</td>
<td>$N_{oy}$</td>
<td>Output Feature高度</td>
</tr>
<tr>
<td style="text-align:left">$N_{if}$</td>
<td>Input Features数量</td>
<td>$N_{of}$</td>
<td>Output Features数量</td>
</tr>
</tbody>
</table>
</div>
<p>循环展开设计变量$(P_{kx},P_{ky}),P_{if},(P_{ox},P_{oy}),P_{of}$，它们表示并行计算的次数。</p>
<p>循环分块设计变量$(T_{kx},T_{ky}),T_{if},(T_{ox},T_{oy}),T_{of}$，他们表示存四个循环中，存储在片上缓存的数据部分。</p>
<p>这些dimensions或者variables具有如下的约束条件。</p>
<script type="math/tex; mode=display">
1\le P* \le T* \le N*</script><p>输入和输出的变量的关系受(1)-(3)约束</p>
<p><img src="https://i.loli.net/2020/06/15/ijvfHAUz4ZYC29p.png" alt="image-20200615172103274" style="zoom: 67%;" /></p>
<h4 id="1-1-循环展开"><a href="#1-1-循环展开" class="headerlink" title="1.1 循环展开"></a>1.1 循环展开</h4><p>如图4-7所示，展开不同的卷积循环会导致不同的计算并行化，这会影响有关数据重用机会和内存访问模式的最佳PE体系结构。</p>
<ul>
<li>Loop-1:在一个cycle内同时计算同一特征图和统一卷积窗中不同位置($P_{kx} \times P_{ky}$数量)的像素,  <strong>相当于并行一个卷积窗的不同元素</strong>. </li>
<li>Loop-2:同时计算$P_{if}$数量的，来自不同特征图/kernel,  同一位置的乘法.  <strong>相当于多个特征图同时做卷积</strong>.</li>
<li>Loop-3:在每个周期中，将来自相同特征图中不同（x，y）位置的($P_{ix}\times P_{iy}$数量)像素数乘以相同的权重,   因此，该重量可以重复使用$P_{ix}\times P_{iy}$次. <strong>相当于同一卷积窗卷积同一图像不同位置</strong>.</li>
<li>Loop-4:在每个周期中，输入特征图的一个像素乘以相同（x，y）位置处, 但来自不同的Kernel的$P_{of}$数量的权重，并且该像素被重用$P_{of}$次。<strong>相当于多个卷积窗卷积同一个特征图.</strong></li>
</ul>
<p><img src="https://i.loli.net/2020/06/15/B5OKNTdglhCrGaE.png" alt="image-20200615172358099" style="zoom:80%;" /></p>
<p><img src="https://i.loli.net/2020/06/15/op2jV9MCFedQnDx.png" style="zoom:80%;" /></p>
<p>四个卷积循环的展开变量值共同确定并行MAC操作的总数以及所需乘法器数量（Pm）</p>
<p><img src="https://i.loli.net/2020/06/15/2WjGodfwNt4yVbX.png" alt="image-20200615174850563" style="zoom: 67%;" /></p>
<h4 id="1-2-循环分块"><a href="#1-2-循环分块" class="headerlink" title="1.2 循环分块"></a>1.2 循环分块</h4><p>循环展开用于将整个数据划分为多个块，这些块可以容纳在片上缓存中，如图8所示。通过正确分配循环切片大小，可以增加数据的位置以减少DRAM访问的次数。</p>
<p><img src="https://i.loli.net/2020/06/15/5eJkWvogZlXnhtm.png" alt="image-20200615175142153" style="zoom:80%;" /></p>
<p>循环分块决定了片上缓存的下界：</p>
<ul>
<li><p>输入像素buffer的大小至少为：$Tix \times Tiy \times Tif \times (pixel_datawidth)$</p>
</li>
<li><p>权重buffer的大小至少为：$Tkx \times Tky \times Tif \times Tof \times (pixel_datawidth)$</p>
</li>
<li><p>输出buffer的大小至少为：$Tox \times Toy \times Tof \times (pixel_datawidth)$</p>
</li>
</ul>
<h4 id="1-3-循环交换"><a href="#1-3-循环交换" class="headerlink" title="1.3 循环交换"></a>1.3 循环交换</h4><p>循环交换确定四个卷积循环的顺序计算顺序。循环交换有两种，即Intratile（tile内）和Intertile（tile间）循环顺序。</p>
<ul>
<li>Intratile循环顺序决定了从片上缓冲器到PE的数据移动方式。 </li>
<li>Intertile循环顺序确定了数据从外部存储器到片上缓冲器的移动。</li>
</ul>
<h2 id="III-硬件加速设计目标的定量分析"><a href="#III-硬件加速设计目标的定量分析" class="headerlink" title="III. 硬件加速设计目标的定量分析"></a>III. 硬件加速设计目标的定量分析</h2><h3 id="1-计算延时"><a href="#1-计算延时" class="headerlink" title="1. 计算延时"></a>1. 计算延时</h3><p>每层乘法操作数量（$Nm$）</p>
<p><img src="https://i.loli.net/2020/06/15/AZcJwFHNxnmMqEp.png" alt="image-20200615181004450" style="zoom:67%;" /></p>
<p>理想情况下，每层的计算周期数应为$Nm / Pm$，而$Pm$是乘法器数量。但是，对于不同的循环展开和分块大小，不一定必须对每个卷积维度都能充分利用乘法器。每层的实际计算周期数为</p>
<p><img src="https://i.loli.net/2020/06/15/pxYsW6rCMqA5UcQ.png" alt="image-20200615181129238" style="zoom:67%;" /></p>
<p>其中的$\lceil  \rceil$表示向上取整</p>
<p>在这里，我们假设乘法器连续接收输入数据而没有空闲周期。如果N∗与T∗的比率或T∗与P ∗的比率不是整数，则乘法器或外部存储器transaction未得到充分利用。除了考虑计算延迟之外，还必须考虑整个系统延迟的内存传输延迟。</p>
<h3 id="2-部分和存储"><a href="#2-部分和存储" class="headerlink" title="2. 部分和存储"></a>2. 部分和存储</h3><p>部分和(partial sum)有时需要在接下来的几个周期中存储在内存中，有时必须在PE之间移动。有效的加速策略必须使部分和的数量最少，并尽快在本地进行处理以减少数据移动。</p>
<p>计算存储在存储器中的部分和（#psum）的流程图如图9所示</p>
<p><img src="https://i.loli.net/2020/06/15/g4XasvzWZrC6IUV.png" alt="image-20200615212926967" style="zoom: 67%;" /></p>
<p>Loop1和loop2全展开时没有部分和，可直接写回DRAM.</p>
<p>P <em>或 T </em>确定的部分和的数量很小，可以存储在本地寄存器（9.2）中。 或片内缓冲器（9.3）。</p>
<p>如果loop tile不能包含Loop-1和Loop-2的所有数据，则需要将一个tile的部分和存储在片上或片外存储器中，直到被另一tile消耗为如（9.6）-（9.9）所示。</p>
<p>总结下来就是, 循环的计算顺序也会影响部分和的数量，并且循环1和Loop-2的计算越早，部分和的数量就越少。将部分和存储在不同级别的存储器层次结构中的要求极大地恶化了数据移动和相关的能源成本。</p>
<h3 id="3-数据复用"><a href="#3-数据复用" class="headerlink" title="3. 数据复用"></a>3. 数据复用</h3><p>重用的两种类型：</p>
<ul>
<li>空间重用（Spatial Reuse）：意味着从片上缓冲器读取数据后，单个像素或权重将在一个时钟周期内用于多个并行乘法器。</li>
<li>时间重用（Temporal Reuse）：时间重用意味着单个像素或权重用于多个连续周期。</li>
</ul>
<p>每个周期具有Pm个并行乘法运算需要将Pm像素和Pm权重馈入乘法器。每个周期所需的d权重数为</p>
<p><img src="https://i.loli.net/2020/06/16/QsHfUTI32PeKp7d.png" alt="image-20200616170603273" style="zoom:67%;" /></p>
<p>如果Loop-1没有展开$(P_{kx} = 1，P_{ky} = 1)$，则每个周期所需的不同像素数$(P_{px})$</p>
<p><img src="https://i.loli.net/2020/06/16/zyxeXpL95qKTAEo.png" alt="image-20200616170419509" style="zoom: 67%;" /></p>
<p>权重在一个周期内在空间上重复使用的次数为</p>
<p><img src="https://i.loli.net/2020/06/16/EwSs5YmVD69c8yv.png" alt="image-20200616170846977" style="zoom:67%;" /></p>
<p>通过展开Loop-3$（P_{ix}&gt; 1$或$P_{iy}&gt; 1）$实现权重的空间重用。像素的数量在一个周期内在空间上被重用（Reuse_px）为</p>
<p><img src="https://i.loli.net/2020/06/16/zFdaY4rBNXkiMcq.png" alt="image-20200616171113765" style="zoom:67%;" /></p>
<p>如果未展开Loop-1，则Reuse_px为</p>
<p><img src="https://i.loli.net/2020/06/16/LHRFOgGDIhPCzJu.png" alt="image-20200616171214050" style="zoom:67%;" /></p>
<p>否则, Reuse_px为</p>
<p><img src="https://i.loli.net/2020/06/16/xeiqHz3Zlb7OrpE.png" alt="image-20200616171327803" style="zoom:67%;" /></p>
<h3 id="4-片上访存"><a href="#4-片上访存" class="headerlink" title="4. 片上访存"></a>4. 片上访存</h3><p>利用数据重用，可以显着减少片上缓冲区访问的次数。由于没有任何数据重用，因此片上缓冲器对像素和权重的总读取操作为<em>Nm</em>，因为每次乘法都需要一个像素和一个权重。通过数据重用，片上缓冲器读取权重的总数变为</p>
<p><img src="https://i.loli.net/2020/06/17/EnKmW8xDTjHqIOt.png" alt="image-20200616172246692" style="zoom:67%;" /></p>
<p>像素的读取操作总数为</p>
<p><img src="https://i.loli.net/2020/06/16/eHR1GlgS7JqE4kT.png" alt="image-20200616172419573" style="zoom:67%;" /></p>
<p>如果无法在一个图块内获得最终输出像素，则将其部分和存储在缓冲区中。每个周期的部分总和向缓冲区的读写操作数为$2×P_{of}×P_{ox}×P_{oy}$，所有部分和都由Loop-1 ($P_{kx},P_{ky}$)产生,  Loop-2（$P_{if}$）生成的乘积在乘法后立即求和。</p>
<p><img src="https://i.loli.net/2020/06/16/uQJcEHYK9TMVkx7.png" alt="image-20200616172827907" style="zoom:67%;" /></p>
<p>将输出像素写入片上缓冲区的次数（即<em>#write_px</em>）与给定CNN模型中输出像素的总数相同。最后，片上缓冲区访问的总数为</p>
<p><img src="https://i.loli.net/2020/06/16/IHOnqbFhseLKwyU.png" alt="image-20200616172906223" style="zoom:67%;" /></p>
<h3 id="5-片外访存"><a href="#5-片外访存" class="headerlink" title="5. 片外访存"></a>5. 片外访存</h3><p>DRAM访问的成本具有更高的延迟和能量,  通过具有足够大的片上缓冲区和适当的循环计算顺序，可以实现最少的DRAM访问次数，从而每个像素和权重仅需从DRAM传输一次。</p>
<p>估计DRAM访问次数的流程图如图10所示，其中<em>#DRAM_px</em>和<em>#DRAM_w</em>t分别表示一个输入像素和一个权重的DRAM访问次数。</p>
<p><img src="https://i.loli.net/2020/06/16/vjgP13nClhDkITu.png" alt="image-20200616173343725" style="zoom:67%;" /></p>
<p>从DRAM中取出所有数据后，应将其全部耗尽，然后将其踢出缓冲区。</p>
<p>因此，如果图块大小或片上缓冲区可以完全覆盖一层的所有输入像素或所有权重，则可以在图10中以（10.8）实现最小DRAM访问。</p>
<p>通过首先计算Loop-3，如图10中的（10.1）和（10.5）中所示，重用了存储在缓冲区中的权重并减少了<em>#DRAM_wt​</em>。</p>
<p>类似地，通过首先计算Loop-4，可以像（10.3）和（10.6）一样重用像素来减少<em>#DRAM_px</em>。<strong>但是，首先计算Loop-3或Loop-4可能会延迟Loop-1或Loop-2的计算，这将导致大量的部分和。</strong></p>
<h2 id="IV-State-of-the-art-CNN加速器所使用的加速方法"><a href="#IV-State-of-the-art-CNN加速器所使用的加速方法" class="headerlink" title="IV. State-of-the-art CNN加速器所使用的加速方法"></a>IV. State-of-the-art CNN加速器所使用的加速方法</h2><p>当前设计的循环展开策略可以分为四种类型：</p>
<ol>
<li>[Type-(A)]展开loop-1，loop-2，loop-4</li>
<li>[Type-(B)]展开loop-2，loop-4</li>
<li>[Type-(C)]展开loop-1，loop-3</li>
<li>[Type-(D)]展开loop-3，loop-4</li>
</ol>
<p><strong>Type-A</strong></p>
<p>在Kernel, Input, Output中实现并行。但Kernel（$N_{kx}×N_{ky}$）通常很小（≤11×11），因此它不能提供足够的并行度，并且其他循环需要进一步展开。一个更具挑战性的问题是，在给定的CNN模型（例如AlexNet和ResNet  ）中，不同卷积层的内核大小可能会有很大差异，这可能导致工作负载不平衡和PE的利用率低下。为了解决这个问题，需要为具有不同内核大小的层配置不同的PE，这会增加控制的复杂性。</p>
<p><strong>Type-B</strong></p>
<p>在Type-A和Type-B中，不会展开Loop-3，这意味着无法重用权重。Type-B仅展开Loop-2和Loop-4，但是第一卷积层的$Nif×Nof$通常很小（≤3×96）4，并且不能提供足够的并行度，这导致利用率和吞吐量较低。如果第一层受到计算限制，或者DRAM延迟不与计算重叠，那么吞吐量下降将影响整体性能，尤其是对于浅层CNN（例如AlexNet和NiN）而言。</p>
<p><strong>Type-C</strong></p>
<p>在Type-C中，Kernel窗口中的每一行都将完全展开（$P_{kx} =  N_{kx}$），并且Loop-3也将部分展开。通过这种方式，可以通过（15）中的由Loop-1和Loop-3引起的重叠来重用像素，并且还可以通过在（12）中展开Loop-3来实现权重重用。但是，Loop-4不会展开，并且无法实现进一步的像素重用。由展开Loop-1引起的PE效率问题也影响Type-C。</p>
<p><strong>Type-D</strong></p>
<p>在Type-D中，将Loop-3和Loop-4都展开，以便可以重用像素和权重。另外，在AlexNet，VGG和ResNet的所有卷积层中，$Nox×Noy×Nof$（≥7×7×64）非常大，因此即使对于具有约3600个DSP Slice的最大FPGA，也可以实现并行级别。<strong>通过这种方式，PE的统一配置和结构可以应用于所有卷积层。</strong></p>
<h2 id="V-具有特定设计变量的优化加速方案"><a href="#V-具有特定设计变量的优化加速方案" class="headerlink" title="V. 具有特定设计变量的优化加速方案"></a>V. 具有特定设计变量的优化加速方案</h2><h3 id="1-最小化延时"><a href="#1-最小化延时" class="headerlink" title="1. 最小化延时"></a>1. 最小化延时</h3><p>见公式(5)-(8)</p>
<p>为了充分利用PE，我们将变量P <em>设为所有卷积层的T </em>的公因子，并将T <em>设为N </em>的公因子，以充分利用外部存储。对于仅具有较小公因数的CNN模型，建议将$\lceil N ∗\rceil / T ∗ − N ∗ / T ∗$和$\lceil T ∗\rceil / P ∗ − T ∗ / P ∗$ (即余数)设置得尽可能小，以最大程度地减小因CNN模型的大小。</p>
<h3 id="2-最小化部分和存储"><a href="#2-最小化部分和存储" class="headerlink" title="2. 最小化部分和存储"></a>2. 最小化部分和存储</h3><p>为了减少部分和的数量和移动，Loop-1和Loop-2都应尽早计算或尽可能展开。为了避免展开第IV节中讨论的Loop-1的缺点并最大化第III-3节中讨论的数据重用，我们决定展开Loop-3（$Pox&gt;1$或$Poy&gt;1$）和Loop-4（$Pof&gt;1$）。这也意味着, 我们无法获得最小的部分和存储，如图9内的（9.1）。受<script type="math/tex">1≤P *≤T *≤N  *</script>的约束，部分和存储的第二个最小数由（9.2）实现图9中的（9.2）-（9.9）。为满足（9.2）的条件，我们首先对Loop-1和Loop-2进行串行计算，并确保对Loop-1和Loop-2的所需数据进行了缓存，即，$ Tkx = Nkx，Tky = Nky，Tif = Nif $。因此，我们只需要存储$ Pof×Pox×Poy $的部分和，可以将其保留在本地寄存器中，并且数据移动最少。</p>
<h3 id="3-最小化片上存储"><a href="#3-最小化片上存储" class="headerlink" title="3. 最小化片上存储"></a>3. 最小化片上存储</h3><p>通过展开Loop-3以重用权重（如公式（12）中所示）和展开Loop-4以便重用像素，如公式(14）中所示，可以最大程度地减少片上Buffer的访问次数。由于我们的部分和被保存在本地寄存器中，因此它们不会增加缓冲区访问和存储的开销。</p>
<h3 id="4-最小化片外访存"><a href="#4-最小化片外访存" class="headerlink" title="4. 最小化片外访存"></a>4. 最小化片外访存</h3><p>当我们首先计算Loop-1和Loop-2以减少部分和时，我们无法实现图10中（10.1）和（10.3）中所述的最小DRAM访问次数，其中一个卷积层的像素和权重均被未完全缓存。因此，我们只能通过为图10的（10.8）中的每一层的所有像素或所有权重分配足够的缓冲区大小来获得最小的DRAM访问。</p>
<p>然后，在最小化片上缓冲区大小的同时进行最小化DRAM访问的优化公式为</p>
<p><img src="https://i.loli.net/2020/06/16/zdPgrHhYyb6BjG3.png" alt="image-20200616201408416" style="zoom:67%;" /></p>
<p>其中<em>#Tile_pxLand</em> <em>#Tile_wtL</em>分别表示输入像素的分块块数和层L的权重，而<em>#CONVs</em>是卷积层数。<em>bits_BUF_px_wt</em>是像素缓冲区大小（<em>bits_BUF_px</em>）和权重缓冲区大小（<em>bits_BUF_wt</em>）的总和，由下式给出：</p>
<p><img src="https://i.loli.net/2020/06/16/xXpqME3hIGtL2CZ.png" alt="image-20200616201529075" style="zoom:67%;" /></p>
<p>像素缓冲区和权重缓冲区都必须足够大，以覆盖所有卷积层的一个切片块中的数据。表示为</p>
<p><img src="https://i.loli.net/2020/06/16/8Tq5hcF9fVJbYDM.png" alt="image-20200616201606094" style="zoom:67%;" /></p>
<p>其中<em>words_pxL</em>和<em>words_wtL</em>分别表示L层中一个分块的像素数和权重。这些以循环分块变量表示，如下所示：</p>
<p><img src="https://i.loli.net/2020/06/16/4eanUkZxrflCjmJ.png" alt="image-20200616201841590" style="zoom:67%;" /></p>
<p>其中<em>words_pxL</em>由输入和输出像素组成（20）中的分块数也由T∗变量确定</p>
<p><img src="https://i.loli.net/2020/06/16/8Gx5CD1BW7a3ru9.png" alt="image-20200616202025981" style="zoom:67%;" /></p>
<p>通过求解（20），我们可以找到$T*$变量的最佳配置，从而使DRAM访问和片上缓冲区的大小最小。但是，由于我们已经像第V-2节中那样设置了$Tkx = Nkx，Tky = Nky，Tif =  Nif$，因此我们只能通过调整$To x，To y$和$Tof$来实现次优解决方案，从而需要更大的缓冲区大小。如果可用的片上存储器足够，我们将$Tox$设置为$Nox$，以便可以缓冲整行，从而受益于DMA transaction。</p>
<p>最后，我们必须通过搜索$To y$和$To f$来求解（20），因为它具有非线性目标函数和带有整数变量的约束。由于VGG-16中的$To y$和$To f$由2×#CONVs  = 26个变量组成，并且每个变量可以具有大约四个可选值，分别受$T ∗ / P ∗ =$整数和$N ∗ / T ∗ =$整数的约束，因此，$ To y$和$To  f$配置约为$4^{26} = 4.5×10^{15}$，这成为一个巨大的求解空间。在ResNet-50 /  ResNet152中，＃CONV分别增加为53和155，这使得解决方案空间甚至更大，分别为$4^{106} = 6.6×10^{63}$和$4^{310} =  4.4×10^{186}$。因此，不可能列举所有候选解。</p>
<p>在本文中，我们建议根据经验为给定的利用CNN特性的片上存储容量找到令人满意的解决方案。  <strong>CNN通常在开始的几层中具有较大的像素数据量和较小的权重大小。当我们进入更深的层时，像素大小随着提取的特征而变小，权重大小随着更多的通道而变大。</strong></p>
<p>图11中说明了这种趋势，其中的条形表示每个卷积层中的数据大小。<strong>要受益于不同层中的数据分发属性，我们只需要使像素缓冲区完全覆盖最后几层，而权重缓冲区则完全覆盖开始的几层。然后，像素和权重都较大的中间层成为缓冲区大小的约束，我们只需要注意这些边界层，就可以大大缩小解决方案空间。</strong>图11中的虚线是我们发现的最小缓冲区大小，同时保证了最少的DRAM访问，并且边界层由箭头指出。如果该缓冲区大小仍然无法装入FPGA片上存储器，则我们需要更改切片策略或减小缓冲区大小，但要付出更多DRAM访问的代价。</p>
<p><img src="https://i.loli.net/2020/06/16/8reIBy6J9Yb7WFP.png" alt="image-20200616203031356" style="zoom: 67%;" /></p>
<h3 id="5-优化循环设计变量"><a href="#5-优化循环设计变量" class="headerlink" title="5. 优化循环设计变量"></a>5. 优化循环设计变量</h3><p>根据上述优化过程，我们提出了一种用于高性能和低通信量的CNN加速器的卷积加速方案，如图12所示。</p>
<p><img src="https://i.loli.net/2020/06/16/rCmFHdE5Ub1o7uQ.png" alt="image-20200616203335677" style="zoom:80%;" /></p>
<h4 id="循环展开："><a href="#循环展开：" class="headerlink" title="循环展开："></a>循环展开：</h4><p>对于所有卷积层，没有展开Loop1和Loop-2，这意味着$Pkx = 1，Pky = 1$和$Pif  =1$。根据（7）和（8），$Pox，Poy$和$Pof$为分别设置为特征图（$Nox，Noy$）和输出通道（$Nof$）的公因子，以充分利用乘法器。表II中列出了不同FPGA上不同CNN的$Pox$，$Poy$和$Pof$的配置，这些配置在很大程度上受到可用计算资源的限制。通过将$P  *$在所有卷积层上设置为常数，可以实现PE的统一结构和映射，从而降低体系结构的复杂性。</p>
<h4 id="循环分块"><a href="#循环分块" class="headerlink" title="循环分块"></a>循环分块</h4><p>对于循环展开，如第V-2节所述，如图12所示，设置$Tkx = Nkx，Tky = Nky，Tif =  Nif$，以便将Loop-1和Loop-2中使用的数据全部缓冲，设置$To x = Nox$使得DMA传输获益。 $To y$和$To f$的详细信息在第V-4节中已经描述过。</p>
<h4 id="循环交换"><a href="#循环交换" class="headerlink" title="循环交换"></a>循环交换</h4><p>我们首先按第V-B节所述依序计算Loop-1，然后计算Loop-2。最后，我们计算Loop-3和Loop-4，这两个循环的确切计算顺序不会对成本产生明显影响,  而是根据我们的$P <em>$和$T  </em>$选择(这句话不知道理解的对不对)。</p>
<p><img src="https://i.loli.net/2020/06/16/xYdwBE1bjmOuWeJ.png" alt="image-20200616204445613"  /></p>
<h2 id="VI-本文提出的CNN加速器"><a href="#VI-本文提出的CNN加速器" class="headerlink" title="VI. 本文提出的CNN加速器"></a>VI. 本文提出的CNN加速器</h2><h3 id="1-Data-Bus-From-Buffer-to-PE-BUF2PE"><a href="#1-Data-Bus-From-Buffer-to-PE-BUF2PE" class="headerlink" title="1. Data Bus From Buffer to PE (BUF2PE)"></a>1. Data Bus From Buffer to PE (BUF2PE)</h3><p>我们在图13中提出了BUF2PE数据总线，以使用FIFO实现数据流，以临时存储要由相邻寄存器阵列重用的像素。此方法类似于[22]中的行缓冲区设计，其中FIFO用于将多个特征行中的像素对齐到kernel窗口，以便可以在kernel窗口内采用并行，即展开Loop-1，而本文展开循环3以在一个特征图中进行并行计算。通过这种方式，简化了寄存器阵列内和寄存器阵列之间的布线，并且数据路由器可以遵循相同的模式进行卷积，具有不同的步幅和零填充，从而提高了加速器的灵活性。</p>
<p><img src="https://i.loli.net/2020/06/17/iAv5g2pm8eOsSH1.png" alt="image-20200617102152077"></p>
<p>BUF2PE数据总线的详细设计如图13所示。来自输入缓冲区的像素被加载到相应的寄存器中，如蓝色虚线框到蓝色实线框所示。然后，像素在周期0~5期间发送到PE或MAC单元，还发送到FIFO，等待相邻寄存器阵列重用。如图13中的紫色像素所示，除最右边的寄存器阵列外，在周期3开始从FIFO读取输入像素。同时，新像素从缓冲区馈入最右边的寄存器阵列。在本文中，由west zero padding引起的偏移是通过移动缓冲区和寄存器阵列之间的连接来处理的，而[15]必须通过填充偏移来更改输入缓冲区的一个地址内的存储模式，这会增加数据传输的复杂性从DRAM到缓冲区。</p>
<p>图14中以stride=1 和stride=2在特征图行级别上显示了粗粒度数据流。图14（a）中的数据流与图13相同，展示了8个周期之后更多的操作。</p>
<p>图14（b）给出了stride= 2, padding= 3的数据流,  它与stride= 1遵循相同的模式, 根据不同的stride和padding设置来调整缓冲区存储模式。由于north zero padding of 3将三行零添加到缓冲区。在stride= 2的情况下，每两行像素在$Poy$ buffer banks中连续分布。在从DRAM接收像素期间，这些调整由缓冲区写使能和地址信号处理。</p>
<p>由于padding和stride的设置不同, 每个数据流都需要各种BUF2PE数据总线，并且这组数据总线称为数据路由器。全局控制逻辑控制数据路由器内部不同BUF2PE总线之间的切换。</p>
<p><img src="https://i.loli.net/2020/06/17/mIVRtsjuiB2T9l1.png" alt="image-20200617103126427"></p>
<h3 id="2-PE体系结构"><a href="#2-PE体系结构" class="headerlink" title="2. PE体系结构"></a>2. PE体系结构</h3><p>根据建议的加速策略和数据流设计图15所示的卷积层的PE体系结构。它由$Pox×Poy×Pof $个PE组成，我们体系结构中的每个PE都是一个独立的MAC单元，由一个乘法器和一个累加器组成。由于Loop-1和Loop-2不会展开，因此不需要加法器树即可对乘法器输出求和。在每个MAC单元内消耗部分和，直到获得最终结果为止，</p>
<p><img src="https://i.loli.net/2020/06/17/8hZgSMr5oD9EcRj.png" alt="image-20200617104033820"></p>
<p>从输入像素缓冲区读取的像素由$Pof$个MAC单元共享，滑动时重叠的像素也被数据路由器重用。从权重缓冲区读取的权重由$Pox×Poy $ 个MAC单元共享。所提出的体系结构通过参数化的Verilog代码实现，并且通过修改设计变量（例如$Pox，Poy和Pof$），可以高度扩展到FPGA甚至ASIC中的不同CNN模型。</p>
<p>在Loop-1和Loop-2完成之后，部分总和需要加上如图1所示的偏置，以获得最终的输出像素。因此，每隔$Nkx×Nky×Nif$个周期，MAC单元会将部分和输出到加法器中，并加上偏置。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文通过对循环优化技术进行数值表征，对卷积循环加速策略进行了深入分析。加速器目标和设计变量之间的关系进行了定量研究。提出了相应的新数据流和体系结构，以最大程度地减少数据通信并提高吞吐量。</p>
<hr>
<blockquote>
<p>更多内容欢迎关注我</p>
<p>博客:<a href="https://shawer.work/" target="_blank" rel="noopener">https://shawer.work/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>经典论文系列</category>
      </categories>
      <tags>
        <tag>计算机体系结构</tag>
        <tag>神经网络加速器</tag>
      </tags>
  </entry>
  <entry>
    <title>计算力参数FLOPS,GOPS,GMACS辨析</title>
    <url>/2020/06/16/%E8%AE%A1%E7%AE%97%E5%8A%9B%E5%8F%82%E6%95%B0FLOPS-GOPS-GMACS%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="FLOPS"><a href="#FLOPS" class="headerlink" title="FLOPS"></a>FLOPS</h2><p>FLOPS是“每秒所执行的浮点运算次数”（floating-point operations per second）的缩写。它常被用来估算电脑的执行效能，尤其是在使用到大量浮点运算的科学计算领域中。正因为FLOPS字尾的那个S，代表秒，而不是复数，所以不能省略掉。</p>
<p>在这里所谓的“浮点运算”，实际上包括了所有涉及小数的运算。这类运算在某类应用软件中常常出现，而它们也比整数运算更花时间。现今大部分的处理器中，都有一个专门用来处理浮点运算的“浮点运算器”（FPU）。也因此FLOPS所量测的，实际上就是FPU的执行速度。而最常用来测量FLOPS的基准程式（benchmark）之一，就是Linpack。</p>
<p>使用时常加数量级前缀如M, G, T等。</p>
<a id="more"></a>
<h2 id="OPS"><a href="#OPS" class="headerlink" title="OPS"></a>OPS</h2><p>OPS与FLOPS类似，只不过OPS一个是操作次数，FLOPS一个是浮点操作次数。</p>
<p>使用时常加数量级前缀如M, G, T等。</p>
<h2 id="MACS"><a href="#MACS" class="headerlink" title="MACS"></a>MACS</h2><p>MACS 指每秒执行的定点<strong>乘累加</strong>操作次数的缩写，它是衡量计算机定点处理能力的量，这个量经常用在那些需要大量定点乘法累加运算的科学运算中，记为MACS。</p>
<p>使用时常加数量级前缀如M, G, T等。</p>
<h2 id="易混辨析—FLOPS-FLOPs-FLOP-s"><a href="#易混辨析—FLOPS-FLOPs-FLOP-s" class="headerlink" title="易混辨析—FLOPS,FLOPs,FLOP/s"></a>易混辨析—FLOPS,FLOPs,FLOP/s</h2><p>FLOPS：注意全大写，是floating point operations per second的缩写，意指每秒浮点运算次数，理解为计算速度。是一个衡量硬件性能的指标。</p>
<p>FLOPs：注意s小写，是floating point operations的缩写（s表复数），意指浮点运算数，理解为计算量。可以用来衡量算法/模型的复杂度。</p>
<p>FLOP/s：等同于FLOPS。</p>
<p>简化到计算机只拥有一块CPU的情况时，可以使用以下公式：</p>
<script type="math/tex; mode=display">
{\displaystyle {\text{FLOPS}}={\text{cores}}\times {\frac {\text{cycles}}{\text{second}}}\times {\frac {\text{FLOPs}}{\text{cycle}}}}</script><p>同样的对于OPS和MACS也适用上述规则。</p>
]]></content>
      <categories>
        <category>神经网络加速器</category>
      </categories>
      <tags>
        <tag>计算机体系结构</tag>
        <tag>神经网络加速器</tag>
      </tags>
  </entry>
</search>
